// ESLint 1.0.0

{
  "extends": [
    ".eslintrc-globals"
  ],
  "env": {
    "browser": true,                    // browser global variables.
    "node": false,                      // Node.js global variables and Node.js scoping.
    "commonjs": true,
    "worker": false,                    // web workers global variables.
    "amd": false,                       // defines require() and define() as global variables as per the amd spec.
    "mocha": false,                     // adds all of the Mocha testing global variables.
    "jasmine": false,                   // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": false,                 // PhantomJS global variables.
    "qunit": false,                     // QUnit global variables.
    "jquery": true,                     // jQuery global variables.
    "prototypejs": false,               // Prototype.js global variables.
    "shelljs": false,                   // ShellJS global variables.
    "meteor": false,                    // Meteor global variables.
    "mongo": false,                     // MongoDB global variables.
    "applescript": false,               // AppleScript global variables.
    "serviceworker": false,             // Service Worker global variables.
    "embertest": false,                 // Ember test helper globals.
    "es6": true                         // enable all ECMAScript 6 features except for modules.
  },
  "rules": {
    "comma-dangle": [2, "never"],       // disallow or enforce trailing commas (recommended)
    "no-cond-assign": [0],              // disallow assignment in conditional expressions (recommended)
    "no-console": [1],                  // disallow use of console in the node environment (recommended)
    "no-constant-condition": [2],       // disallow use of constant expressions in conditions (recommended)
    "no-control-regex": [2],            // disallow control characters in regular expressions (recommended)
    "no-debugger": [1],                 // disallow use of debugger (recommended)
    "no-dupe-args": [2],                // disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": [2],                // disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": [2],           // disallow a duplicate case label. (recommended)
    "no-empty-character-class": [2],    // disallow the use of empty character classes in regular expressions (recommended)
    "no-empty": [2],                    // disallow empty statements (recommended)
    "no-ex-assign": [2],                // disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": [2],       // disallow double-negation boolean casts in a boolean context (recommended)
    "no-extra-parens": [0],             // disallow unnecessary parentheses
    "no-extra-semi": [2],               // disallow unnecessary semicolons (recommended)
    "no-func-assign": [2],              // disallow overwriting functions written as function declarations (recommended)
    "no-inner-declarations": [2],       // disallow function or variable declarations in nested blocks (recommended)
    "no-invalid-regexp": [2],           // disallow invalid regular expression strings in the RegExp constructor (recommended)
    "no-irregular-whitespace": [2],     // disallow irregular whitespace outside of strings and comments (recommended)
    //??? "no-negated-in-lhs": [],      // disallow negation of the left operand of an in expression (recommended)
    "no-obj-calls": [2],                // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    "no-regex-spaces": [2],             // disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": [2],            // disallow sparse arrays (recommended)
    "no-unreachable": [2],              // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    "use-isnan": [2],                   // disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": [1, {"requireReturn": false}],
                                        // Ensure JSDoc comments are valid
    "valid-typeof": [2],                // Ensure that the results of typeof are compared against a valid string (recommended)
    "no-unexpected-multiline": [2],     // Avoid code that looks like two expressions but is actually one

    // Best Practices
    /// These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.
    "accessor-pairs": [2],              // Enforces getter/setter pairs in objects
    "block-scoped-var": [2],            // treat var statements as if they were block scoped
    "complexity": [1],                  // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": [2],           // require return statements to either always or never specify values
    "curly": [0],                       // specify curly brace conventions for all control statements
    "default-case": [2],                // require default case in switch statements
    "dot-notation": [0],                // encourages use of dot notation whenever possible
    "dot-location": [0],                // enforces consistent newlines before or after dots
    "eqeqeq": [2, "smart"],                      // require the use of === and !==
    "guard-for-in": [2],                // make sure for-in loops have an if statement
    "no-alert": [1],                    // disallow the use of alert, confirm, and prompt
    "no-caller": [2],                   // disallow use of arguments.caller or arguments.callee
    "no-div-regex": [2],                // disallow division operators explicitly at beginning of regular expression
    "no-else-return": [2],              // disallow else after a return in an if
    "no-empty-label": [2],              // disallow use of labels for anything other than loops and switches
    "no-eq-null": [0],                  // disallow comparisons to null without a type-checking operator
    "no-eval": [2],                     // disallow use of eval()
    "no-extend-native": [2],            // disallow adding to native types
    "no-extra-bind": [2],               // disallow unnecessary function binding
    "no-fallthrough": [2],              // disallow fallthrough of case statements (recommended)
    "no-floating-decimal": [2],         // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [2],        // disallow the type conversions with shorter notations
    "no-implied-eval": [2],             // disallow use of eval()-like methods
    "no-invalid-this": [0],             // disallow this keywords outside of classes or class-like objects
    "no-iterator": [2],                 // disallow usage of __iterator__ property
    "no-labels": [2],                   // disallow use of labeled statements
    "no-lone-blocks": [2],              // disallow unnecessary nested blocks
    "no-loop-func": [2],                // disallow creation of functions within loops
    "no-multi-spaces": [0],             // disallow use of multiple spaces
    "no-multi-str": [2],                // disallow use of multiline strings
    "no-native-reassign": [2],          // disallow reassignments of native objects
    "no-new-func": [2],                 // disallow use of new operator for Function object
    "no-new-wrappers": [2],             // disallows creating new instances of String,Number, and Boolean
    "no-new": [2],                      // disallow use of the new operator when not part of an assignment or comparison
    "no-octal-escape": [2],             // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal": [2],                    // disallow use of octal literals (recommended)
    "no-param-reassign": [0],           // disallow reassignment of function parameters
    "no-process-env": [2],              // disallow use of process.env
    "no-proto": [2],                    // disallow usage of __proto__ property
    "no-redeclare": [2],                // disallow declaring the same variable more than once (recommended)
    "no-return-assign": [2],            // disallow use of assignment in return statement
    "no-script-url": [2],               // disallow use of javascript: urls.
    "no-self-compare": [2],             // disallow comparisons where both sides are exactly the same
    "no-sequences": [2],                // disallow use of the comma operator
    "no-throw-literal": [2],            // restrict what can be thrown as an exception
    "no-unused-expressions": [2],       // disallow usage of expressions in statement position
    "no-useless-call": [2],             // disallow unnecessary .call() and .apply()
    "no-void": [2],                     // disallow use of the void operator
    "no-warning-comments": [1, {"terms": ["TODO", "DEV", "FIXME"], "location": "start"}],
                                        // disallow usage of configurable warning terms in comments": [], e.g. TODO or FIXME
    "no-with": [2],                     // disallow use of the with statement
    "radix": [2],                       // require use of the second argument for parseInt()
    "vars-on-top": [0],                 // require declaration of all vars at the top of their containing scope
    "wrap-iife": [2, "outside"],        // require immediate function invocation to be wrapped in parentheses
    "yoda": [2],                        // require or disallow Yoda conditions

    // Strict Mode
    /// These rules relate to using strict mode.
    "strict": [0],                      // controls location of Use Strict Directives

    // Variables
    /// These rules have to do with variable declarations.
    "init-declarations": [0],           // enforce or disallow variable initializations at definition
    "no-catch-shadow": [2],             // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": [2],               // disallow deletion of variables (recommended)
    "no-label-var": [2],                // disallow labels that share a name with a variable
    "no-shadow-restricted-names": [2],  // disallow shadowing of names such as arguments
    "no-shadow": [0],                   // disallow declaration of variables already declared in the outer scope
    "no-undef-init": [2],               // disallow use of undefined when initializing variables
    "no-undef": [2],                    // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undefined": [2],                // disallow use of undefined variable
    "no-unused-vars": [1, {"vars": "local", "args": "none"}],
                                        // disallow declaration of variables that are not used in the code (recommended)
    "no-use-before-define": [0],        // disallow use of variables before they are defined

    // Node.js
    /// These rules are specific to JavaScript running on Node.js.
    "callback-return": [1],             // enforce return after a callback
    "handle-callback-err": [1],         // enforce error handling in callbacks
    "no-mixed-requires": [1],           // disallow mixing regular variable and require declarations
    "no-new-require": [1],              // disallow use of new operator with the require function
    "no-path-concat": [1],              // disallow string concatenation with __dirname and __filename
    "no-process-exit": [1],             // disallow process.exit()
    "no-restricted-modules": [0],       // restrict usage of specified node modules
    "no-sync": [1],                     // disallow use of synchronous methods

    // Stylistic Issues
    /// These rules are purely matters of style and are quite subjective.
    "array-bracket-spacing": [2],       // enforce spacing inside array brackets
    "brace-style": [2],                 // enforce one true brace style
    "camelcase": [2],                   // require camel case names
    "comma-spacing": [2],               // enforce spacing before and after comma
    "comma-style": [2],                 // enforce one true comma style
    "computed-property-spacing": [2],   // require or disallow padding inside computed properties
    "consistent-this": [2, "_self"],     // enforce consistent naming when capturing the current execution context
    "eol-last": [2],                    // enforce newline at the end of file, with no multiple empty lines
    "func-names": [0],                  // require function expressions to have a name
    "func-style": [2, "declaration"],   // enforce use of function declarations or expressions
    "id-length": [0],                   // this option enforces minimum and maximum identifier lengths (variable names, property names etc.) (off by default)
    "indent": [2, 2, {"VariableDeclarator": 2}],
                                        // specify tab or space width for your code
    "key-spacing": [2],
                                        // enforce spacing between keys and values in object literal properties
    "lines-around-comment": [2],        // enforce empty lines around comments
    "linebreak-style": [2],             // disallow mixed 'LF' and 'CRLF' as linebreaks
    "max-nested-callbacks": [0],        // specify the maximum depth callbacks can be nested
    "new-cap": [2],                     // require a capital letter for constructors
    "new-parens": [2],                  // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": [0],           // require or disallow an empty newline after variable declarations
    "no-array-constructor": [2],        // disallow use of the Array constructor
    "no-continue": [2],                 // disallow use of the continue statement
    "no-inline-comments": [0],          // disallow comments inline after code
    "no-lonely-if": [2],                // disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": [2],    // disallow mixed spaces and tabs for indentation (recommended)
    "no-multiple-empty-lines": [2],     // disallow multiple empty lines
    "no-nested-ternary": [0],           // disallow nested ternary expressions
    "no-new-object": [0],               // disallow the use of the Object constructor
    "no-spaced-func": [2],              // disallow space between function identifier and application
    "no-ternary": [0],                  // disallow the use of ternary operators
    "no-trailing-spaces": [2],          // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": [0],        // disallow dangling underscores in identifiers
    "no-unneeded-ternary": [2],         // disallow the use of Boolean literals in conditional expressions
    "object-curly-spacing": [2],        // require or disallow padding inside curly braces
    "one-var": [0],                     // require or disallow one variable declaration per function
    "operator-assignment": [2],         // require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [2],          // enforce operators to be placed before or after line breaks
    "padded-blocks": [0],               // enforce padding within blocks
    "quote-props": [0],                 // require quotes around object literal property names
    "quotes": [2, "single"],            // specify whether backticks, double or single quotes should be used
    "id-match": [0],                    // require identifiers to match the provided regular expression
    "semi-spacing": [2],                // enforce spacing before and after semicolons
    "semi": [2],                        // require or disallow use of semicolons instead of ASI
    "sort-vars": [0],                   // sort variables within the same declaration block
    "space-after-keywords": [2],        // require a space after certain keywords
    "space-before-blocks": [2],         // require or disallow a space before blocks
    "space-before-function-paren": [2, "never"], // require or disallow a space before function opening parenthesis
    "space-in-parens": [2],             // require or disallow spaces inside parentheses
    "space-infix-ops": [2],             // require spaces around operators
    "space-return-throw-case": [2],     // require a space after return, throw, and case
    "space-unary-ops": [2],             // require or disallow spaces before/after unary operators
    "spaced-comment": [2],              // require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": [2],                  // require regex literals to be wrapped in parentheses

    // ECMAScript 6
    /// These rules are only relevant to ES6 environments.
    "arrow-parens": [0],                // require parens in arrow function arguments
    "arrow-spacing": [2],               // require space before/after arrow function's arrow
    // "constructor-super": [],         // verify calls of super() in constructors
    // "generator-star-spacing": [],    // enforce spacing around the * in generator functions
    // "no-class-assign": [],           // disallow modifying variables of class declarations
    "no-const-assign": [2],             // disallow modifying variables that are declared using const
    // "no-this-before-super": [],      // disallow use of this/super before calling super() in constructors.
    "no-var": [0],                      // require let or const instead of var
    // "object-shorthand": [2],         // require method and property shorthand syntax for object literals
    // "prefer-const": [],              // suggest using const declaration for variables that are never modified after declared
    // "prefer-spread": [],             // suggest using the spread operator instead of .apply().
    // "prefer-reflect": [],            // suggest using Reflect methods where applicable
    // "require-yield": [],             // disallow generator functions that do not have yield

    // Legacy
    /// The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.
    // "max-depth": [],                 // specify the maximum depth that blocks can be nested
    // "max-len": [],                   // specify the maximum length of a line in your program
    // "max-params": [],                // limits the number of parameters that can be used in the function declaration.
    // "max-statements": [],            // specify the maximum number of statement allowed in a function
    // "no-bitwise": [],                // disallow use of bitwise operators
    // "no-plusplus": []                // disallow use of unary operators, ++ and --

    // Removed
    /// These rules existed in a previous version of ESLint but have since been replaced by newer rules.
    // "generator-star": [],
    // "global-strict": [],
    // "no-comma-dangle": [],
    // "no-empty-class": [],
    // "no-extra-strict": [],
    // "no-reserved-keys": [],
    // "no-space-before-semi": [],
    // "no-wrap-func": [],
    // "space-after-function-name": [],
    // "space-before-function-parentheses": [],
    // "space-in-brackets": [],
    // "space-unary-word-ops": [],
    // "spaced-line-comment": [],
  },

  "ecmaFeatures": {
    "modules": "true"
  }
}
